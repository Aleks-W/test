/*
 * Дополучкино - отдел взыскания
 *
 * Debt collection
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LoanListLoans : IEquatable<LoanListLoans>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// ФИО клиента
        /// </summary>
        /// <value>ФИО клиента</value>
        [DataMember(Name="fio")]
        public string Fio { get; set; }

        /// <summary>
        /// Дата взятия займа (DD.MM.YYYY HH:MM:SS)
        /// </summary>
        /// <value>Дата взятия займа (DD.MM.YYYY HH:MM:SS)</value>
        [DataMember(Name="created_at")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Срок кредита в днях
        /// </summary>
        /// <value>Срок кредита в днях</value>
        [DataMember(Name="period")]
        public int? Period { get; set; }

        /// <summary>
        /// Способ выдачи займа
        /// </summary>
        /// <value>Способ выдачи займа</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PayTypeEnum
        {
            /// <summary>
            /// Enum CardEnum for bank_card
            /// </summary>
            [EnumMember(Value = "bank_card")]
            CardEnum = 0        }

        /// <summary>
        /// Способ выдачи займа
        /// </summary>
        /// <value>Способ выдачи займа</value>
        [DataMember(Name="pay_type")]
        public PayTypeEnum? PayType { get; set; }

        /// <summary>
        /// Сумма займа в копейках
        /// </summary>
        /// <value>Сумма займа в копейках</value>
        [DataMember(Name="amount")]
        public int? Amount { get; set; }

        /// <summary>
        /// Дата возврата по договору (DD.MM.YYYY HH:MM:SS)
        /// </summary>
        /// <value>Дата возврата по договору (DD.MM.YYYY HH:MM:SS)</value>
        [DataMember(Name="closed_expected")]
        public string ClosedExpected { get; set; }

        /// <summary>
        /// Срок просрочки в днях
        /// </summary>
        /// <value>Срок просрочки в днях</value>
        [DataMember(Name="overdue_period")]
        public int? OverduePeriod { get; set; }

        /// <summary>
        /// Дата последнего мероприятия (DD.MM.YYYY HH:MM:SS)
        /// </summary>
        /// <value>Дата последнего мероприятия (DD.MM.YYYY HH:MM:SS)</value>
        [DataMember(Name="last_execution_date")]
        public string LastExecutionDate { get; set; }

        /// <summary>
        /// Запланированно на (DD.MM.YYYY HH:MM:SS)
        /// </summary>
        /// <value>Запланированно на (DD.MM.YYYY HH:MM:SS)</value>
        [DataMember(Name="next_execution_date")]
        public string NextExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets ResponsibleManager
        /// </summary>
        [DataMember(Name="responsible_manager")]
        public LoanListResponsibleManager ResponsibleManager { get; set; }

        /// <summary>
        /// Область проживания клиента
        /// </summary>
        /// <value>Область проживания клиента</value>
        [DataMember(Name="actual_address_region")]
        public string ActualAddressRegion { get; set; }

        /// <summary>
        /// Текущее время клиента (HH:MM:SS)
        /// </summary>
        /// <value>Текущее время клиента (HH:MM:SS)</value>
        [DataMember(Name="current_time")]
        public string CurrentTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanListLoans {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Fio: ").Append(Fio).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PayType: ").Append(PayType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ClosedExpected: ").Append(ClosedExpected).Append("\n");
            sb.Append("  OverduePeriod: ").Append(OverduePeriod).Append("\n");
            sb.Append("  LastExecutionDate: ").Append(LastExecutionDate).Append("\n");
            sb.Append("  NextExecutionDate: ").Append(NextExecutionDate).Append("\n");
            sb.Append("  ResponsibleManager: ").Append(ResponsibleManager).Append("\n");
            sb.Append("  ActualAddressRegion: ").Append(ActualAddressRegion).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LoanListLoans)obj);
        }

        /// <summary>
        /// Returns true if LoanListLoans instances are equal
        /// </summary>
        /// <param name="other">Instance of LoanListLoans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanListLoans other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Fio == other.Fio ||
                    Fio != null &&
                    Fio.Equals(other.Fio)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    PayType == other.PayType ||
                    PayType != null &&
                    PayType.Equals(other.PayType)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    ClosedExpected == other.ClosedExpected ||
                    ClosedExpected != null &&
                    ClosedExpected.Equals(other.ClosedExpected)
                ) && 
                (
                    OverduePeriod == other.OverduePeriod ||
                    OverduePeriod != null &&
                    OverduePeriod.Equals(other.OverduePeriod)
                ) && 
                (
                    LastExecutionDate == other.LastExecutionDate ||
                    LastExecutionDate != null &&
                    LastExecutionDate.Equals(other.LastExecutionDate)
                ) && 
                (
                    NextExecutionDate == other.NextExecutionDate ||
                    NextExecutionDate != null &&
                    NextExecutionDate.Equals(other.NextExecutionDate)
                ) && 
                (
                    ResponsibleManager == other.ResponsibleManager ||
                    ResponsibleManager != null &&
                    ResponsibleManager.Equals(other.ResponsibleManager)
                ) && 
                (
                    ActualAddressRegion == other.ActualAddressRegion ||
                    ActualAddressRegion != null &&
                    ActualAddressRegion.Equals(other.ActualAddressRegion)
                ) && 
                (
                    CurrentTime == other.CurrentTime ||
                    CurrentTime != null &&
                    CurrentTime.Equals(other.CurrentTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Fio != null)
                    hashCode = hashCode * 59 + Fio.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (PayType != null)
                    hashCode = hashCode * 59 + PayType.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (ClosedExpected != null)
                    hashCode = hashCode * 59 + ClosedExpected.GetHashCode();
                    if (OverduePeriod != null)
                    hashCode = hashCode * 59 + OverduePeriod.GetHashCode();
                    if (LastExecutionDate != null)
                    hashCode = hashCode * 59 + LastExecutionDate.GetHashCode();
                    if (NextExecutionDate != null)
                    hashCode = hashCode * 59 + NextExecutionDate.GetHashCode();
                    if (ResponsibleManager != null)
                    hashCode = hashCode * 59 + ResponsibleManager.GetHashCode();
                    if (ActualAddressRegion != null)
                    hashCode = hashCode * 59 + ActualAddressRegion.GetHashCode();
                    if (CurrentTime != null)
                    hashCode = hashCode * 59 + CurrentTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LoanListLoans left, LoanListLoans right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LoanListLoans left, LoanListLoans right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

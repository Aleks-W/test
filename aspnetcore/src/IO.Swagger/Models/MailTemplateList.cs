/*
 * Дополучкино - отдел взыскания
 *
 * Debt collection
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Шаблон для отправки письма
    /// </summary>
    [DataContract]
    public partial class MailTemplateList : IEquatable<MailTemplateList>
    { 
        /// <summary>
        /// ID шаблона
        /// </summary>
        /// <value>ID шаблона</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Имя шаблона
        /// </summary>
        /// <value>Имя шаблона</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Тема письма (для предпросмотра)
        /// </summary>
        /// <value>Тема письма (для предпросмотра)</value>
        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Текст письма (для предпросмотра)
        /// </summary>
        /// <value>Текст письма (для предпросмотра)</value>
        [DataMember(Name="body")]
        public string Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailTemplateList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MailTemplateList)obj);
        }

        /// <summary>
        /// Returns true if MailTemplateList instances are equal
        /// </summary>
        /// <param name="other">Instance of MailTemplateList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailTemplateList other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    Body == other.Body ||
                    Body != null &&
                    Body.Equals(other.Body)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Body != null)
                    hashCode = hashCode * 59 + Body.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MailTemplateList left, MailTemplateList right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MailTemplateList left, MailTemplateList right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

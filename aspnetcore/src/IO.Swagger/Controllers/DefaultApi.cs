/*
 * Дополучкино - отдел взыскания
 *
 * Debt collection
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Назначить займы на сотрудника</remarks>
        /// <param name="body"></param>
        /// <response code="200">Запрос завершился удачно</response>
        /// <response code="400">Некорректный запрос, ошибка в параметрах запроса</response>
        /// <response code="403">Недостаточно прав доступа</response>
        [HttpPost]
        [Route("/api/v1/admin/debt/loans/assign")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminDebtLoansAssignPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Некорректный запрос, ошибка в параметрах запроса")]
        public virtual IActionResult ApiV1AdminDebtLoansAssignPost([FromBody]Body body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Возвращает список займов для отдела взыскания</remarks>
        /// <param name="filter">Набор фильтров</param>
        /// <response code="200">Список займов</response>
        /// <response code="400">Некорректный запрос, ошибка в параметрах запроса</response>
        /// <response code="403">Недостаточно прав доступа</response>
        [HttpGet]
        [Route("/api/v1/admin/debt/loans")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminDebtLoansGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(LoanList), description: "Список займов")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Некорректный запрос, ошибка в параметрах запроса")]
        public virtual IActionResult ApiV1AdminDebtLoansGet([FromQuery]List<Object> filter)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LoanList));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 0,\n  \"loans\" : [ {\n    \"period\" : 1,\n    \"amount\" : 5,\n    \"created_at\" : \"created_at\",\n    \"fio\" : \"fio\",\n    \"last_execution_date\" : \"last_execution_date\",\n    \"responsible_manager\" : {\n      \"full_name\" : \"full_name\",\n      \"id\" : 2\n    },\n    \"actual_address_region\" : \"actual_address_region\",\n    \"pay_type\" : \"bank_card\",\n    \"id\" : 6,\n    \"closed_expected\" : \"closed_expected\",\n    \"next_execution_date\" : \"next_execution_date\",\n    \"overdue_period\" : 5,\n    \"current_time\" : \"current_time\"\n  }, {\n    \"period\" : 1,\n    \"amount\" : 5,\n    \"created_at\" : \"created_at\",\n    \"fio\" : \"fio\",\n    \"last_execution_date\" : \"last_execution_date\",\n    \"responsible_manager\" : {\n      \"full_name\" : \"full_name\",\n      \"id\" : 2\n    },\n    \"actual_address_region\" : \"actual_address_region\",\n    \"pay_type\" : \"bank_card\",\n    \"id\" : 6,\n    \"closed_expected\" : \"closed_expected\",\n    \"next_execution_date\" : \"next_execution_date\",\n    \"overdue_period\" : 5,\n    \"current_time\" : \"current_time\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<LoanList>(exampleJson)
                        : default(LoanList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Добавить запланированное событие</remarks>
        /// <param name="body"></param>
        /// <param name="id">ID займа</param>
        /// <response code="200">Запрос завершился удачно</response>
        /// <response code="400">Некорректный запрос, ошибка в параметрах запроса</response>
        [HttpPost]
        [Route("/api/v1/admin/debt/loans/{id}/add_event")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminDebtLoansIdAddEventPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Некорректный запрос, ошибка в параметрах запроса")]
        public virtual IActionResult ApiV1AdminDebtLoansIdAddEventPost([FromBody]Body1 body, [FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Отправить клиенту с этим займом письмо по заданному шаблону</remarks>
        /// <param name="body"></param>
        /// <param name="id">ID займа</param>
        /// <response code="200">Запрос завершился удачно</response>
        [HttpPost]
        [Route("/api/v1/admin/debt/loans/{id}/send_mail")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminDebtLoansIdSendMailPost")]
        public virtual IActionResult ApiV1AdminDebtLoansIdSendMailPost([FromBody]Body2 body, [FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Отправить письмо по шаблону</remarks>
        /// <param name="body"></param>
        /// <response code="200">Письмо отправлено</response>
        /// <response code="404">Шаблон или займ не найден</response>
        /// <response code="422">Не удалось отправить письмо</response>
        [HttpPost]
        [Route("/api/v1/admin/mail/send")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminMailSendPost")]
        public virtual IActionResult ApiV1AdminMailSendPost([FromBody]Body3 body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Получить список шаблонов для отправки писем</remarks>
        /// <param name="type">Тип шаблонов (для взыскания, для продажников)</param>
        /// <response code="200">Список шаблонов для писем</response>
        /// <response code="404">Данный тип шаблонов не найден</response>
        [HttpGet]
        [Route("/api/v1/admin/mail/templates/{type}")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminMailTemplatesTypeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MailTemplateList), description: "Список шаблонов для писем")]
        public virtual IActionResult ApiV1AdminMailTemplatesTypeGet([FromRoute][Required]string type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MailTemplateList));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"subject\" : \"subject\",\n  \"name\" : \"template.mail.debt_1_day_overdue\",\n  \"id\" : 0,\n  \"body\" : \"body\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MailTemplateList>(exampleJson)
                        : default(MailTemplateList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
